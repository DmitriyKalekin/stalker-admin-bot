import app.model as model
from app.telebot import GroupChatTele, UserTele
# import inspect

async def process(app, r: dict):
    print("CTL HERE")
    if "new_chat_members" in r["message"]:
        print("CTL:", "on_group_add_members")
        return await on_group_add_members(app, r)
    if "left_chat_member" in r["message"]:
        print("CTL:", "on_group_kick_member")
        return await on_group_kick_member(app, r)
    if "group_chat_created" in r["message"] and r["message"]["group_chat_created"]:
        print("CTL:", "on_group_create")
        return await on_group_create(app, r)
    if "new_chat_title" in r["message"]:
        print("CTL:", "on_group_rename")
        return await on_group_rename(app, r)
    if "text" in r["message"] and r["message"]["text"][:3] == "–ü–°–ö":
        return await on_object_found(app, r)
    return False

async def on_object_found(app, r: dict):
    # https://www.google.com/maps/@54.9774488,73.3911583,19z
    group_chat = GroupChatTele(r["message"]["chat"])
    user = UserTele(r["message"]["from"])
    rank = str(await model.get_user_rank(user.id))
    rank = rank[0].upper() + rank[1:]      
    code = r["message"]["text"].strip().upper()
    obj = await model.get_artefact_by_search_code(app, code)
    if not obj:
        resp = await app.telebot.sendMessage(group_chat.id, f"üö´ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —Å –∫–æ–¥–æ–º: `{code}` –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
    else:
        resp = await app.telebot.sendMessage(group_chat.id, f"*–ù–æ–≤–æ—Å—Ç–∏ –ó–û–ù–´ 27.07.2019*\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ‚Ññ `{obj['id']}`\nüë®‚Äçü¶∞ –ù–∞—à–µ–¥—à–∏–π: `{rank}` *{user.full_name}*\n‚≠êÔ∏è –°–ª–∞–≤–∞ –≥–µ—Ä–æ—è–º!")
        resp = await app.telebot.sendPhoto(group_chat.id, photo=f"https://eva-bot.ru/img/{obj['id']}.jpg", caption=f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç ‚Ññ`{obj['id']}`: {obj['title']}")
        resp = await app.telebot.sendMessage(group_chat.id, f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ:*\nID: {obj['id']}\n–ö–ª–∞—Å—Å: {obj['class_name']}\n```\n{obj['descr']}\n```\n–°–ü–†–ê–í–ö–ê –ò–ó –ê–†–•–ò–í–ê:\n```\n{obj['class_descr']}\n```\n")
        resp = await app.telebot.sendMessage(group_chat.id, f"üéØ*–ü—Ä–∏–∫–∞–∑ ‚Ññ1073 –Ω–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ*\n–°–û–í–ï–†–®–ï–ù–ù–û –°–ï–ö–†–ï–¢–ù–û!\n–ó–∞ –∫–æ–Ω—Ç–∞–∫—Ç —Å –æ–ø–∞—Å–Ω—ã–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º ‚Ññ `{obj['id']}` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤–æ–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–ø–ø—ã –ö–†–ê–°–ù–´–ï.\n–û–±—ä–µ–∫—Ç `{rank} {user.full_name}` –ø–æ–¥–ª–µ–∂–∏—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—é.\n–û–±—ä–µ–∫—Ç –≤–æ–æ—Ä—É–∂—ë–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–ø–æ—Å–æ–±–µ–Ω –∫ –º—É—Ç–∞—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å!\nüéñ –í–æ–µ–Ω–Ω—ã–π –∫–æ–º–∏—Ç–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –ó–æ–Ω—ã")


async def on_group_create(app, r: dict):
    group_chat = GroupChatTele(r["message"]["chat"])
    admin = UserTele(r["message"]["from"])
    await model.group_create(app, group_chat, admin)
    resp = await app.telebot.sendMessage(
        group_chat.id, 
        f"""
        ‚ùóÔ∏è –û—Ç—Ä—è–¥ `{group_chat.title}` –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–∞–Ω–¥–∏—Ä–æ–º *{admin.full_name}*.\n–ú–Ω–µ –Ω—É–∂–Ω–æ –ª–∏—á–Ω–æ –æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –±–æ–π—Ü–æ–≤.\n1. –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–∞–ø–∏—à–µ—Ç –º–Ω–µ –≤ –ª–∏—á–∫—É: https://t.me/StalkerAdminBot\n2. –ö–∞–∂–¥—ã–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –Ω–∞–ø–∏—Å–∞–≤ `/j`.
        """)
    return True

async def on_group_rename(app, r: dict):    
    group_chat = GroupChatTele(r["message"]["chat"])
    new_chat_title = str(r["message"]["new_chat_title"])
    await model.group_rename(app, group_chat, new_chat_title)
    resp = await app.telebot.sendMessage(
        group_chat.id, 
        f"‚ùóÔ∏è –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Ä—è–¥–∞: `{new_chat_title}`")
    return True

async def on_bot_added_to_group(app, r: dict):
    """
    DEPRECATED
    """
    pass



async def on_group_add_members(app, r: dict):
    group_chat = GroupChatTele(r["message"]["chat"])
    members = list(r["message"]["new_chat_members"])
    add_success = await model.group_add_members(app, group_chat, members)
    if not add_success:
        return False
    if len(members) == 0:
        return False
    txt = ""
    for m in members:
        user = UserTele(m)
        if user.is_bot:
            txt += f"üëÅ `–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å` *{user.full_name}* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤ –æ—Ç—Ä—è–¥"
            await model.group_create(app, group_chat, UserTele(r["message"]["from"]))
        else:
            rank = str(await model.get_user_rank(user.id))
            rank = rank[0].upper() + rank[1:]    
            txt += f"‚≠êÔ∏è `{rank}` *{user.full_name}* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤ –æ—Ç—Ä—è–¥"
    await app.telebot.sendMessage(group_chat.id, txt)
    return True

async def on_group_kick_member(app, r: dict):
    group_chat = GroupChatTele(r["message"]["chat"])
    user = UserTele(r["message"]["left_chat_member"])
    rank = str(await model.get_user_rank(user.id))
    rank = rank[0].upper() + rank[1:]
    kick_success = await model.group_kick_member(app, group_chat.id, user) 
    txt = f"‚ùå `{rank}` *{user.full_name}* –ø–æ–∫–∏–Ω—É–ª –æ—Ç—Ä—è–¥"
    await app.telebot.sendMessage(group_chat.id, txt)  
    return kick_success

async def on_group_mention_member(app, r: dict):
    group_chat_id = r["message"]["chat"]["id"]
    await model.kick_member(app, group_chat_id, dict(r["message"]["left_chat_member"]))   
    return True    

